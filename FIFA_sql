# database from kaggle
# ideas: regression stats against match performance - is str important
# cluster player types
import sqlite3
from pandasql import sqldf
import pandas as pd
from dateutil.parser import parse
from datetime import datetime
import xlrd
from pandas import ExcelWriter
from numbers import Number
import matplotlib.pyplot as plt

sqlite_file = 'database.sqlite'
conn = sqlite3.connect(sqlite_file)
c = conn.cursor()
c.execute("SELECT name FROM sqlite_master WHERE type='table';")
print(c.fetchall())



player = pd.read_sql_query("""
                           select * from Player;
                           """, 
                           conn)
                           
Player_Attributes = pd.read_sql_query("""
                           select * from Player_Attributes;
                           """, 
                           conn)

df_players_combine = pd.merge(left=Player_Attributes, right=player, how='left', left_on='player_api_id', right_on='player_api_id')
df_players_combine['date'] = pd.to_datetime(df_players_combine['date'])

# find player age
t = pd.to_datetime(df_players_combine['date'])
d = pd.to_datetime(df_players_combine['birthday'])

df_players_combine['age'] = (t - d).astype('<m8[Y]')


# find stats of all players who played for Arsenal
matches = pd.read_sql_query("""
                           select * from Match;
                           """, 
                           conn)
                           
teams = pd.read_sql_query("""
                           select * from Team;
                           """, 
                           conn)
                           
team_attributes = pd.read_sql_query("""
                           select * from Team_Attributes;
                           """, 
                           conn)

country = pd.read_sql_query("""
                           select * from Country;
                           """, 
                           conn)

country.rename(columns={'name': 'Country_name'}, inplace=True)

league = pd.read_sql_query("""
                           select * from League;
                           """, 
                           conn)

league.rename(columns={'name': 'League_name'}, inplace=True)

matches = pd.merge(left=matches, right=country, how='left', left_on='country_id', right_on='id')
matches = pd.merge(left=matches, right=league, how='left', left_on='country_id', right_on='country_id')

df_match_home = pd.merge(left=matches, right=teams, how='left', left_on='home_team_api_id', right_on='team_api_id')

df_match_home.rename(columns={'team_api_id':'home_team_id', 'team_fifa_api_id': 'home_team_fifa_id', 'team_long_name':'home_team', 'team_short_name': 'home_team_short'}, inplace=True)

df_match_combined = pd.merge(left=df_match_home, right=teams, how='left', left_on='away_team_api_id', right_on='team_api_id')

df_match_combined.rename(columns={'team_api_id':'away_team_id', 'team_fifa_api_id': 'away_team_fifa_id', 'team_long_name':'away_team', 'team_short_name': 'away_team_short'}, inplace=True)
df_ArsHomeMatch_filter = df_match_combined[(df_match_combined['home_team'] == 'Arsenal')]
df_ArsAwayMatch_filter = df_match_combined[(df_match_combined['away_team'] == 'Arsenal')]
df_ArsHomePlayers = df_ArsHomeMatch_filter.iloc[:, 55:66]
df_ArsAwayPlayers = df_ArsAwayMatch_filter.iloc[:, 66:77]
home_players_list = pd.unique(df_ArsHomePlayers.values.ravel())
home_players_list = home_players_list.tolist()
away_players_list = pd.unique(df_ArsAwayPlayers.values.ravel())
away_players_list = away_players_list.tolist()
Ars_players_list = home_players_list + away_players_list
Ars_players_list = list(set(Ars_players_list))

df_player_filter = df_players_combine[df_players_combine['player_api_id'].isin(Ars_players_list)]
df_player_filter = df_player_filter.sort_values(['age'], ascending=[1])

team_details_table_home = matches[['league_id', 'home_team_api_id', 'season']]
team_details_table_home.rename(columns={'home_team_api_id': 'team_api_id'}, inplace=True)
team_details_table_away = matches[['league_id', 'away_team_api_id', 'season']]
team_details_table_away.rename(columns={'away_team_api_id': 'team_api_id'}, inplace=True)
team_details_table_all = pd.concat([team_details_table_home, team_details_table_away], axis=0)
team_details_table_all = team_details_table_all.drop_duplicates()
team_details_table_all = pd.merge(left=team_details_table_all, right=country, how='left', left_on='league_id', right_on='id')
team_details_table_all = pd.merge(left=team_details_table_all, right=teams, how='left', left_on='team_api_id', right_on='team_api_id')
df_TeamWithAttribute = pd.merge(left=teams, right=team_attributes, how='left', left_on='team_api_id', right_on='team_api_id')
df_TeamWithAttribute = pd.merge(left=df_TeamWithAttribute, right=team_details_table_all, how='left', left_on='team_api_id', right_on='team_api_id')

df_TeamAttribute_filter = df_TeamWithAttribute[df_TeamWithAttribute['team_long_name'] == 'FC Barcelona' ]

#plot player age vs rating
x = df_player_filter['age']
y = df_player_filter['overall_rating']
plt.plot(x, y)
plt.show()

df_match_filter = df_match_filter.sort_values(['stage'], ascending=[1])

writer = ExcelWriter('fifa_kaggle.xlsx')
df_TeamWithAttribute.to_excel(writer,'Full Table')
writer.save()

